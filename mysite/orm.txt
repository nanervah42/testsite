python manage.py shell
from news.models import News, Category
News.objects.get(title='News 5')
news5 = _
news5.title
news5.category
news5.category.title


cat4 = Category.objects.get(pk=4)
cat4.news_set.all()    # получение всех связанных с первичной моделью(Category) данных из вторичной модели(News) (<имя связанной модели>_set)


News.objects.filter(pk__gt=12)  # получение новостей, где pk>12, иными словами select * from ... where pk>12
	через запятую можно добавлять иные фильтры (pk__gt=12, title__contains='news'), что равнозначно оператору WHERE ... AND ...  в sql

Чтобы получить все записи из связанных данных не по идентификатору первичной модели,а например по тайтлу первичной модели
используется запись вида <имя поля внешного ключа>__<имя поля первичной модели> например:
News.objects.filter(category__title='Политика') - получаем все данные модели News, где категория равна Политика


Category.objects.filter(news__title__contains='News') - получаем названия категорий из модели Category, если поле title вторичной модели News
содержит в себе ключевое слово 'News'
Category.objects.filter(news__title__contains='News').distinct() - тоже самое, но только уникальные значения



Класс Q
from django.db.models import Q
| - или
& - и
~ - не

News.objects.filter(Q(pk__in=[2, 3]) | Q(title__contains='формы 2')) - получаем новости с pk 2 и 3, а также новость, которая содержит "формы 2"
News.objects.filter(Q(pk__in=[2, 3]) | Q(title__contains='формы 2') & ~Q(pk__gt=4)) - тоже самое и pk не должен быть больше 4


СРЕЗЫ:
News.objects.all()[:3]      -   получение первых трёх записей


АГРЕГАТНЫЕ ВЫЧИСЛЕНИЯ:
from django.db.models import Max, Min или from django.db.models import *

avg, count, max, min и т.д.

News.objects.aggregate(Min('views'), Max('views'))  -   получение максимального и минимального значения из столбца views
{'views__min': 0, 'views__max': 1000}

News.objects.aggregate(min_views=Min('views'), max_views=Max('views'))  -   тоже самое, но...
{'min_views': 0, 'max_views': 1000} -   ...можно задать именованные названия аргументов

News.objects.aggregate(diff=Min('views') - Max('views'))    -   можно производить вычисления прям внутри

News.objects.aggregate(Sum('views'))    -   сумма всего столбца
News.objects.aggregate(Avg('views'))    -   среднее всего столбца
News.objects.aggregate(Count('views'))    -   количество значений всего столбца
News.objects.aggregate(cnt=Count('views', distinct=True))   -   количество значений всего столбца, но только уникальных


ANNOTATE
(from django.db.models import *) не забыть
cats = Category.objects.annotate(Count('news'))
for item in cats:
    print(item.title, item.news__count) -   выведет название категории и количество новостей в ней

либо можно сделать именованным:
cats = Category.objects.annotate(cnt=Count('news'))
for item in cats:
    print(item.title, item.cnt)

cats = Category.objects.annotate(max_views=Max('news__views'))
for item in cats:
    print(item.title, item.max_views)   -   вычисляем максимальное значение столбца views для каждой категории

cats = Category.objects.annotate(sum_views=Sum('news__views'))
for item in cats:
    print(item.title, item.sum_views)   -   вычисляем сумму views для каждой категории

cats = Category.objects.annotate(cnt=Count('news')).filter(cnt__gt=0)   -   считаем количество новостей по категориям и отфильтровываем пустые категории


VALUES
news1 = News.objects.values('title', 'views').get(pk=1)  -   получение полей title и news у новости с id=1 в виде словаря


from django.db import connection    - ---------------------------------------------------
connection.queries                  - можно посмотреть запросы к базе данных на языке sql


F класс:
news = News.objects.get(pk=1)   -   ---
news.views = F('views') + 1     -   ---
news.save()                     -   Добавление к числу views единицы

news = News.objects.filter(content__icontains=F('title'))   -   content должен включать значение, которое есть в title


Функции баз данных
from django.db.models.functions import *
news = News.objects.annotate(length=Length('title')).all()
for i in news:
    print(i.title, i.length)    -   выводим тайтл, длину тайтла в символах (вычисление производится на стороне скл а не питон)


Прямые SQL запросы:
from news.models import *
News.objects.raw("SELECT * FROM news_news")
1)обязательно брать id в селекте

Для защиты от sql инъекций, параметры в запрос необходимо подавать следующим образом
news = News.objects.raw("SELECT * FROM news_news WHERE title = %s", ['News 5'])